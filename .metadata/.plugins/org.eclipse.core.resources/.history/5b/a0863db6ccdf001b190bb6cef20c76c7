import java.time.Instant;
import java.util.*;

public class sets {

	int id;
	String name;

	public sets(int id, String name) {
		this.id = id;
		this.name = name;
	}

	public static void main(String[] args) {

		/*
		 * Set ts=new TreeSet<>(); for(int i=0;i<100;i++) ts.add(i);
		 * 
		 * System.out.println("Sequential stream"); System.out.println(Instant.now());
		 * ts.stream().forEach(System.out::println); System.out.println(Instant.now());
		 * 
		 * System.out.println("Parallel stream");
		 * ts.parallelStream().forEachOrdered(System.out::println);
		 * System.out.println(Instant.now());
		 * 
		 * Set hs=new HashSet(); for(int i=65;i<=90;i++) { hs.add((char)i); }
		 * System.out.println(hs);
		 */
		sets obj1 = new sets(1, "Adam");
		sets obj2 = new sets(2, "User2");

		Set<Type> s = new TreeSet<>();
		s.add(new Type(new Integer(2)));
		s.add(new Type(new Integer(1)));
		s.add(new Type(obj2));
		s.add(new Type(obj1));
		s.add(new Type(new String("Hi")));
		s.add(new Type(new String("Hello")));
		
		System.out.println("Size is "+s.size());

		Collections.sort(s,new Type());

	}

}

class Type implements Comparator {

	private Object object;

	public Type(Object o) {
		this.object = o;
	}

	/*
	 * @Override public int compareTo(Type next) { if(this.object == null ||
	 * next.object == null){ return -1; } Object o1=this.object; Object
	 * o2=next.object; if(this.object instanceof Integer){ if(next.object instanceof
	 * Integer){ int i = (int)next.object; int j = (int)this.object; return j - i;
	 * }else if(next.object instanceof String){ return -1; } return 0; }
	 * 
	 * else if(o1 instanceof sets) {
	 * 
	 * if(o2 instanceof sets) { System.out.println("j-i= "); int i=(int)(((sets)
	 * o2).id); int j=(int)(((sets) o1).id); System.out.println("j-i= "+(j-i));
	 * return j-i; } else if(o2 instanceof String) { return -1; } return 0; } else
	 * if(this.object instanceof String){ if(next.object instanceof String){ String
	 * str1 = (String)this.object; String str2 = (String)next.object; return
	 * str1.compareTo(str2); }else if(next.object instanceof Integer){ return 1; }
	 * return 0; } return 0; }
	 */
	
	
	@Override
    public int hashCode() {
        return object.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        return super.equals(obj);
    }

	
	  @Override 
	  public String toString() { 
		  return "--" + object + "--"; 
	   }
	  
	  public int compare(Object o1, Object o2) {
			
			if(o1 == null || o2 == null){
		        return -1;
		    }
		    
		    if(o1 instanceof String){
		  	  
		        if(o2 instanceof String){
		            String str1 = (String)o1;
		            String str2 = (String)o2;
		            return str1.compareTo(str2);
		        }
		        else if(o2 instanceof sets) {
		       	 String str = (String)o1;
		     		sets u = (sets)o2;
		     		return str.compareTo(u.name);
		     	}
		        else if(o2 instanceof Integer){
		            return -1;
		        }
		        return 0;
		    }
		     
		    else if(o1 instanceof sets) {
		  	  
		    	if(o2 instanceof sets) {
		    		sets u1 = (sets)o1;
		    		sets u2 = (sets)o2;
		    		return u1.name.compareTo(u2.name);
		    	}
		    	else if(o2 instanceof String) {
		    		String str = (String)o2;
		    		sets u = (sets)o1;
		    		return u.name.compareTo(str);
		    	}
		  
		    	else if(o2 instanceof Integer)
		    		return -1;

		    	return 0;
		    }
		    
		    else if(o1 instanceof Integer){ 
		        
		   	  if(o2 instanceof Integer){
		             int i = (int)o2;
		             int j = (int)o1;
		             return j - i;
		         }else if(o2 instanceof String || o2 instanceof sets){
		             return 1;
		         }
		         return 0;
		     }

		    return 0;
		}
	 
}
